// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Syntax.InternalSyntax;
using SamLu.CodeAnalysis.MoonScript;
using Roslyn.Utilities;

namespace SamLu.CodeAnalysis.MoonScript
{
    using System.Diagnostics.CodeAnalysis;
    using Microsoft.CodeAnalysis;
    using SamLu.CodeAnalysis.MoonScript.Syntax;

    public partial class MoonScriptSyntaxVisitor<TResult>
    {
        /// <summary>Called when the visitor visits a ChunkSyntax node.</summary>
        public virtual TResult? VisitChunk(ChunkSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BlockSyntax node.</summary>
        public virtual TResult? VisitBlock(BlockSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        public virtual TResult? VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) => this.DefaultVisit(node);
    }

    public partial class MoonScriptSyntaxVisitor
    {
        /// <summary>Called when the visitor visits a ChunkSyntax node.</summary>
        public virtual void VisitChunk(ChunkSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BlockSyntax node.</summary>
        public virtual void VisitBlock(BlockSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        public virtual void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) => this.DefaultVisit(node);
    }

    public partial class MoonScriptSyntaxRewriter
    {
        public override MoonScriptSyntaxNode? VisitChunk(ChunkSyntax node)
            => node.Update((BlockSyntax?)Visit(node.Block) ?? throw new ArgumentNullException("block"), VisitToken(node.EndOfFileToken));

        public override MoonScriptSyntaxNode? VisitBlock(BlockSyntax node)
            => node.Update(VisitList(node.Statements));

        public override MoonScriptSyntaxNode? VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            => node.Update(VisitList(node.Tokens));
    }

    public static partial class SyntaxFactory
    {

        /// <summary>Creates a new ChunkSyntax instance.</summary>
        public static ChunkSyntax Chunk(BlockSyntax block, SyntaxToken endOfFileToken)
        {
            if (block == null) throw new ArgumentNullException(nameof(block));
            if (endOfFileToken.Kind() != SyntaxKind.EndOfFileToken) throw new ArgumentException(nameof(endOfFileToken));
            return (ChunkSyntax)Syntax.InternalSyntax.SyntaxFactory.Chunk((Syntax.InternalSyntax.BlockSyntax)block.Green, (Syntax.InternalSyntax.SyntaxToken)endOfFileToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ChunkSyntax instance.</summary>
        public static ChunkSyntax Chunk(BlockSyntax? block = default)
            => SyntaxFactory.Chunk(block ?? SyntaxFactory.Block(), SyntaxFactory.Token(SyntaxKind.EndOfFileToken));

        /// <summary>Creates a new BlockSyntax instance.</summary>
        public static BlockSyntax Block(SyntaxList<StatementSyntax> statements)
        {
            return (BlockSyntax)Syntax.InternalSyntax.SyntaxFactory.Block(statements.Node.ToGreenList<Syntax.InternalSyntax.StatementSyntax>()).CreateRed();
        }

        /// <summary>Creates a new BlockSyntax instance.</summary>
        public static BlockSyntax Block()
            => SyntaxFactory.Block(default);

        /// <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        public static SkippedTokensTriviaSyntax SkippedTokensTrivia(SyntaxTokenList tokens)
        {
            return (SkippedTokensTriviaSyntax)Syntax.InternalSyntax.SyntaxFactory.SkippedTokensTrivia(tokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>()).CreateRed();
        }

        /// <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        public static SkippedTokensTriviaSyntax SkippedTokensTrivia()
            => SyntaxFactory.SkippedTokensTrivia(default(SyntaxTokenList));
    }
}
