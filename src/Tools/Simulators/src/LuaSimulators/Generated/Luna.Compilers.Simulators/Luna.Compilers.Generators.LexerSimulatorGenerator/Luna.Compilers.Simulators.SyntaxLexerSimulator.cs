// <auto-generated />

#nullable enable

namespace Luna.Compilers.Simulators
{
    partial class SyntaxLexerSimulator
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Luna.Compilers.Generators.LexerSimulatorGenerator", "42.42.42.42")]
        private global::Luna.Compilers.Simulators.LexerSimulatorContext _context;

        #region Lua
        private partial global::SamLu.CodeAnalysis.Lua.Syntax.InternalSyntax.Lexer CreateLuaLexer(global::Microsoft.CodeAnalysis.Text.SourceText text);
        private partial global::SamLu.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken LexNode(global::SamLu.CodeAnalysis.Lua.Syntax.InternalSyntax.Lexer lexer);
        private partial global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxToken> DescendTokens(global::SamLu.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken node);

        #endregion

        #region Luna.Compilers.Simulators.ILexerSimulator
        [global::System.CodeDom.Compiler.GeneratedCode("Luna.Compilers.Generators.LexerSimulatorGenerator", "42.42.42.42")]
        [global::System.Diagnostics.DebuggerNonUserCode]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        void global::Luna.Compilers.Simulators.ILexerSimulator.Initialize(global::Luna.Compilers.Simulators.LexerSimulatorContext context) => this._context = context;
        [global::System.CodeDom.Compiler.GeneratedCode("Luna.Compilers.Generators.LexerSimulatorGenerator", "42.42.42.42")]
        [global::System.Diagnostics.DebuggerNonUserCode]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        global::Luna.Compilers.Simulators.TokenKind global::Luna.Compilers.Simulators.ILexerSimulator.GetTokenKind(int rawKind)
        {
            switch(this._context.LanguageName)
            {
                case "Lua": return this.GetTokenKind((global::SamLu.CodeAnalysis.Lua.SyntaxKind)rawKind);
                default: throw new InvalidOperationException("意外的语言名称：" + this._context.LanguageName);
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Luna.Compilers.Generators.LexerSimulatorGenerator", "42.42.42.42")]
        [global::System.Diagnostics.DebuggerNonUserCode]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxToken> global::Luna.Compilers.Simulators.ILexerSimulator.LexToEnd(global::Microsoft.CodeAnalysis.Text.SourceText text)
        {
            switch(this._context.LanguageName)
            {
                case "Lua":
                {
                    var lexer = this.CreateLuaLexer(text);
                    global::SamLu.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken node;
                    do
                    {
                        node = this.LexNode(lexer);
                        foreach (var token in this.DescendTokens(node)) yield return token;
                    }
                    while (node.Kind != global::SamLu.CodeAnalysis.Lua.SyntaxKind.EndOfFileToken);
                    break;
                }
                default: throw new InvalidOperationException("意外的语言名称：" + this._context.LanguageName);
            }
        }
        #endregion
    }
}
